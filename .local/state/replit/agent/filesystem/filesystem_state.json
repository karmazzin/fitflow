{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# FitFlow - Progressive Workout Training App\n\n## Overview\n\nFitFlow is a progressive workout training application that provides structured fitness programs with weekly progression. The application uses a full-stack architecture with React frontend and Express.js backend, utilizing PostgreSQL for data persistence. The system is designed to track workout programs, training sessions, and exercise completions while supporting offline functionality for mobile users.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React + TypeScript**: Modern component-based UI built with React 18 and TypeScript for type safety\n- **Wouter**: Lightweight client-side routing replacing React Router\n- **TanStack Query**: Server state management and data fetching with caching\n- **Tailwind CSS + Shadcn/ui**: Utility-first CSS framework with pre-built component library\n- **Progressive Web App (PWA)**: Service worker implementation for offline support and app-like experience\n\n### Backend Architecture\n- **Express.js**: RESTful API server with TypeScript support\n- **Storage Abstraction Layer**: Interface-based storage design allowing for easy database swapping\n- **Session Management**: Express sessions with PostgreSQL storage using connect-pg-simple\n- **Development Integration**: Vite middleware for seamless development experience\n\n### Database Design\n- **PostgreSQL + Drizzle ORM**: Type-safe database operations with schema-first approach\n- **Core Entities**:\n  - Users with authentication\n  - Workout Programs with weekly progression\n  - Training Days (A, B, C rotation)\n  - Exercises with week-specific formulas\n  - Workout Sessions with completion tracking\n  - Exercise Completions with performance data\n  - User Settings for personalization\n\n### Progressive Training Logic\n- **7-Week Program Structure**: Predefined progression from RPE 6-7 to RPE 9\n- **Dynamic Exercise Formulas**: Week-specific sets, reps, and intensity stored as JSON\n- **Auto-Progression**: Automatic advancement based on completion and time\n- **Training Day Rotation**: A/B/C day structure with different exercise focuses\n\n### Mobile-First Design\n- **Touch Interactions**: Swipeable exercise cards and gesture-based navigation\n- **Offline Data Sync**: LocalStorage caching with background sync\n- **Timer Integration**: Built-in workout timer with pause/resume functionality\n- **PWA Features**: Installable app with push notifications support\n\n## External Dependencies\n\n### Database & Infrastructure\n- **Neon Database**: Serverless PostgreSQL provider (@neondatabase/serverless)\n- **Drizzle**: Type-safe ORM with PostgreSQL dialect\n- **Connect-pg-simple**: PostgreSQL session store for Express\n\n### UI & Styling\n- **Radix UI**: Headless component primitives for complex UI patterns\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Modern icon library\n- **Embla Carousel**: Touch-friendly carousel component\n\n### Development Tools\n- **Vite**: Fast build tool with HMR and TypeScript support\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TSX**: TypeScript execution for development server\n- **PostCSS**: CSS processing with Autoprefixer\n\n### Form & Validation\n- **React Hook Form**: Performant form library with validation\n- **Zod**: Runtime type validation integrated with Drizzle schemas\n- **@hookform/resolvers**: Validation resolver for React Hook Form + Zod\n\n### Utilities\n- **Date-fns**: Modern date utility library\n- **Class-variance-authority**: Utility for managing component variants\n- **CLSX**: Conditional className utility\n- **Nanoid**: URL-safe unique ID generator","size_bytes":3666},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        success: \"var(--success)\",\n        neutral: \"var(--neutral)\",\n        'app-background': \"var(--app-background)\",\n        'text-primary': \"var(--text-primary)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"slide-in\": {\n          from: {\n            transform: \"translateX(100%)\",\n          },\n          to: {\n            transform: \"translateX(0)\",\n          },\n        },\n        \"slide-out\": {\n          from: {\n            transform: \"translateX(0)\",\n          },\n          to: {\n            transform: \"translateX(-100%)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"slide-in\": \"slide-in 0.3s ease-out\",\n        \"slide-out\": \"slide-out 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3382},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Workout program routes\n  app.get(\"/api/programs\", async (req, res) => {\n    try {\n      const programs = await storage.getAllPrograms();\n      res.json(programs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch programs\" });\n    }\n  });\n\n  app.post(\"/api/programs\", async (req, res) => {\n    try {\n      const program = await storage.createProgram(req.body);\n      res.json(program);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create program\" });\n    }\n  });\n\n  // Workout session routes\n  app.post(\"/api/sessions\", async (req, res) => {\n    try {\n      const session = await storage.createSession(req.body);\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create session\" });\n    }\n  });\n\n  app.patch(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const session = await storage.updateSession(req.params.id, req.body);\n      if (!session) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update session\" });\n    }\n  });\n\n  // Exercise completion routes\n  app.post(\"/api/exercises/complete\", async (req, res) => {\n    try {\n      const completion = await storage.createExerciseCompletion(req.body);\n      res.json(completion);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to record exercise completion\" });\n    }\n  });\n\n  // User settings routes\n  app.get(\"/api/settings/:userId\", async (req, res) => {\n    try {\n      const settings = await storage.getUserSettings(req.params.userId);\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.patch(\"/api/settings/:userId\", async (req, res) => {\n    try {\n      const settings = await storage.updateUserSettings(req.params.userId, req.body);\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update settings\" });\n    }\n  });\n\n  // Statistics routes\n  app.get(\"/api/stats/:userId\", async (req, res) => {\n    try {\n      const stats = await storage.getUserStats(req.params.userId);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // Sync route for offline data\n  app.post(\"/api/sync-workout\", async (req, res) => {\n    try {\n      // Handle offline workout data sync\n      const syncData = req.body;\n      await storage.syncOfflineData(syncData);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to sync workout data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":2959},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type WorkoutProgram,\n  type InsertWorkoutProgram,\n  type TrainingDay,\n  type InsertTrainingDay,\n  type Exercise,\n  type InsertExercise,\n  type WorkoutSession,\n  type InsertWorkoutSession,\n  type ExerciseCompletion,\n  type InsertExerciseCompletion,\n  type UserSettings,\n  type InsertUserSettings\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Program methods\n  getAllPrograms(): Promise<WorkoutProgram[]>;\n  getProgram(id: string): Promise<WorkoutProgram | undefined>;\n  createProgram(program: InsertWorkoutProgram): Promise<WorkoutProgram>;\n  updateProgram(id: string, updates: Partial<WorkoutProgram>): Promise<WorkoutProgram | undefined>;\n\n  // Session methods\n  createSession(session: InsertWorkoutSession): Promise<WorkoutSession>;\n  updateSession(id: string, updates: Partial<WorkoutSession>): Promise<WorkoutSession | undefined>;\n  getUserSessions(userId: string): Promise<WorkoutSession[]>;\n\n  // Exercise completion methods\n  createExerciseCompletion(completion: InsertExerciseCompletion): Promise<ExerciseCompletion>;\n  getSessionCompletions(sessionId: string): Promise<ExerciseCompletion[]>;\n\n  // Settings methods\n  getUserSettings(userId: string): Promise<UserSettings | undefined>;\n  updateUserSettings(userId: string, updates: Partial<UserSettings>): Promise<UserSettings>;\n\n  // Statistics methods\n  getUserStats(userId: string): Promise<any>;\n\n  // Sync methods\n  syncOfflineData(data: any): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private programs: Map<string, WorkoutProgram>;\n  private trainingDays: Map<string, TrainingDay>;\n  private exercises: Map<string, Exercise>;\n  private sessions: Map<string, WorkoutSession>;\n  private completions: Map<string, ExerciseCompletion>;\n  private userSettings: Map<string, UserSettings>;\n\n  constructor() {\n    this.users = new Map();\n    this.programs = new Map();\n    this.trainingDays = new Map();\n    this.exercises = new Map();\n    this.sessions = new Map();\n    this.completions = new Map();\n    this.userSettings = new Map();\n\n    // Initialize with default data\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Create default workout program\n    const defaultProgram: WorkoutProgram = {\n      id: \"default-program\",\n      userId: \"default-user\",\n      name: \"Progressive Training Program\",\n      totalWeeks: 7,\n      currentWeek: 1,\n      startDate: new Date(),\n      autoProgression: true,\n      createdAt: new Date(),\n    };\n    this.programs.set(defaultProgram.id, defaultProgram);\n\n    // Create default training days\n    const trainingDayA: TrainingDay = {\n      id: \"day-a\",\n      programId: \"default-program\",\n      dayType: \"A\",\n      name: \"Day A - Upper Body\",\n      description: \"Upper body focused workout\",\n      estimatedDuration: 60,\n    };\n    this.trainingDays.set(trainingDayA.id, trainingDayA);\n\n    const trainingDayB: TrainingDay = {\n      id: \"day-b\", \n      programId: \"default-program\",\n      dayType: \"B\",\n      name: \"Day B - Lower Body\",\n      description: \"Lower body focused workout\",\n      estimatedDuration: 65,\n    };\n    this.trainingDays.set(trainingDayB.id, trainingDayB);\n\n    const trainingDayC: TrainingDay = {\n      id: \"day-c\",\n      programId: \"default-program\", \n      dayType: \"C\",\n      name: \"Day C - Full Body\",\n      description: \"Full body workout\",\n      estimatedDuration: 70,\n    };\n    this.trainingDays.set(trainingDayC.id, trainingDayC);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAllPrograms(): Promise<WorkoutProgram[]> {\n    return Array.from(this.programs.values());\n  }\n\n  async getProgram(id: string): Promise<WorkoutProgram | undefined> {\n    return this.programs.get(id);\n  }\n\n  async createProgram(insertProgram: InsertWorkoutProgram): Promise<WorkoutProgram> {\n    const id = randomUUID();\n    const program: WorkoutProgram = {\n      ...insertProgram,\n      id,\n      totalWeeks: insertProgram.totalWeeks ?? 7,\n      currentWeek: insertProgram.currentWeek ?? 1,\n      autoProgression: insertProgram.autoProgression ?? true,\n      createdAt: new Date(),\n    };\n    this.programs.set(id, program);\n    return program;\n  }\n\n  async updateProgram(id: string, updates: Partial<WorkoutProgram>): Promise<WorkoutProgram | undefined> {\n    const program = this.programs.get(id);\n    if (!program) return undefined;\n\n    const updatedProgram = { ...program, ...updates };\n    this.programs.set(id, updatedProgram);\n    return updatedProgram;\n  }\n\n  async createSession(insertSession: InsertWorkoutSession): Promise<WorkoutSession> {\n    const id = randomUUID();\n    const session: WorkoutSession = { \n      ...insertSession, \n      id,\n      endTime: insertSession.endTime ?? null,\n      completed: insertSession.completed ?? false,\n      exercisesCompleted: insertSession.exercisesCompleted ?? 0,\n    };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async updateSession(id: string, updates: Partial<WorkoutSession>): Promise<WorkoutSession | undefined> {\n    const session = this.sessions.get(id);\n    if (!session) return undefined;\n\n    const updatedSession = { ...session, ...updates };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async getUserSessions(userId: string): Promise<WorkoutSession[]> {\n    return Array.from(this.sessions.values()).filter(\n      session => {\n        const program = this.programs.get(session.programId);\n        return program?.userId === userId;\n      }\n    );\n  }\n\n  async createExerciseCompletion(insertCompletion: InsertExerciseCompletion): Promise<ExerciseCompletion> {\n    const id = randomUUID();\n    const completion: ExerciseCompletion = { \n      ...insertCompletion, \n      id,\n      completed: insertCompletion.completed ?? false,\n      sets: insertCompletion.sets ?? null,\n      reps: insertCompletion.reps ?? null,\n      weight: insertCompletion.weight ?? null,\n      notes: insertCompletion.notes ?? null,\n    };\n    this.completions.set(id, completion);\n    return completion;\n  }\n\n  async getSessionCompletions(sessionId: string): Promise<ExerciseCompletion[]> {\n    return Array.from(this.completions.values()).filter(\n      completion => completion.sessionId === sessionId\n    );\n  }\n\n  async getUserSettings(userId: string): Promise<UserSettings | undefined> {\n    return this.userSettings.get(userId);\n  }\n\n  async updateUserSettings(userId: string, updates: Partial<UserSettings>): Promise<UserSettings> {\n    const existing = this.userSettings.get(userId);\n    const settings: UserSettings = {\n      id: existing?.id || randomUUID(),\n      userId,\n      workoutReminders: true,\n      restDayAlerts: false,\n      theme: 'light',\n      ...existing,\n      ...updates,\n    };\n    this.userSettings.set(userId, settings);\n    return settings;\n  }\n\n  async getUserStats(userId: string): Promise<any> {\n    const sessions = await this.getUserSessions(userId);\n    const completedSessions = sessions.filter(s => s.completed);\n    \n    const totalWorkouts = completedSessions.length;\n    const totalDuration = completedSessions.reduce((sum, s) => {\n      if (s.endTime && s.startTime) {\n        return sum + (s.endTime.getTime() - s.startTime.getTime()) / 1000;\n      }\n      return sum;\n    }, 0);\n\n    // Calculate streak (simplified)\n    const streak = this.calculateStreak(completedSessions);\n\n    return {\n      totalWorkouts,\n      totalDuration,\n      streak,\n      averageDuration: totalWorkouts > 0 ? totalDuration / totalWorkouts : 0,\n    };\n  }\n\n  private calculateStreak(sessions: WorkoutSession[]): number {\n    if (sessions.length === 0) return 0;\n    \n    // Sort by date descending\n    const sortedSessions = sessions\n      .filter(s => s.endTime)\n      .sort((a, b) => b.endTime!.getTime() - a.endTime!.getTime());\n\n    let streak = 1;\n    const today = new Date();\n    \n    for (let i = 1; i < sortedSessions.length; i++) {\n      const current = sortedSessions[i];\n      const previous = sortedSessions[i - 1];\n      \n      const daysDiff = Math.floor(\n        (previous.endTime!.getTime() - current.endTime!.getTime()) / (1000 * 60 * 60 * 24)\n      );\n      \n      if (daysDiff <= 2) { // Allow for rest days\n        streak++;\n      } else {\n        break;\n      }\n    }\n\n    return streak;\n  }\n\n  async syncOfflineData(data: any): Promise<void> {\n    // Handle offline data synchronization\n    if (data.sessions) {\n      for (const sessionData of data.sessions) {\n        await this.createSession(sessionData);\n      }\n    }\n    \n    if (data.completions) {\n      for (const completionData of data.completions) {\n        await this.createExerciseCompletion(completionData);\n      }\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9374},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const workoutPrograms = pgTable(\"workout_programs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  totalWeeks: integer(\"total_weeks\").notNull().default(7),\n  currentWeek: integer(\"current_week\").notNull().default(1),\n  startDate: timestamp(\"start_date\").notNull(),\n  autoProgression: boolean(\"auto_progression\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const trainingDays = pgTable(\"training_days\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  programId: varchar(\"program_id\").notNull(),\n  dayType: text(\"day_type\").notNull(), // 'A', 'B', 'C'\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  estimatedDuration: integer(\"estimated_duration\"), // in minutes\n});\n\nexport const exercises = pgTable(\"exercises\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  trainingDayId: varchar(\"training_day_id\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  instructions: text(\"instructions\").array(),\n  videoUrl: text(\"video_url\"),\n  orderIndex: integer(\"order_index\").notNull(),\n  weekFormulas: jsonb(\"week_formulas\").notNull(), // { \"1\": \"3x8-10\", \"2\": \"3x10-12\", etc. }\n});\n\nexport const workoutSessions = pgTable(\"workout_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  programId: varchar(\"program_id\").notNull(),\n  trainingDayId: varchar(\"training_day_id\").notNull(),\n  weekNumber: integer(\"week_number\").notNull(),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\"),\n  completed: boolean(\"completed\").notNull().default(false),\n  exercisesCompleted: integer(\"exercises_completed\").notNull().default(0),\n  totalExercises: integer(\"total_exercises\").notNull(),\n});\n\nexport const exerciseCompletions = pgTable(\"exercise_completions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull(),\n  exerciseId: varchar(\"exercise_id\").notNull(),\n  completed: boolean(\"completed\").notNull().default(false),\n  sets: integer(\"sets\"),\n  reps: text(\"reps\"),\n  weight: text(\"weight\"),\n  notes: text(\"notes\"),\n});\n\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique(),\n  workoutReminders: boolean(\"workout_reminders\").notNull().default(true),\n  restDayAlerts: boolean(\"rest_day_alerts\").notNull().default(false),\n  theme: text(\"theme\").notNull().default('light'),\n});\n\n// Insert schemas\nexport const insertWorkoutProgramSchema = createInsertSchema(workoutPrograms).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTrainingDaySchema = createInsertSchema(trainingDays).omit({\n  id: true,\n});\n\nexport const insertExerciseSchema = createInsertSchema(exercises).omit({\n  id: true,\n});\n\nexport const insertWorkoutSessionSchema = createInsertSchema(workoutSessions).omit({\n  id: true,\n});\n\nexport const insertExerciseCompletionSchema = createInsertSchema(exerciseCompletions).omit({\n  id: true,\n});\n\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n});\n\n// Types\nexport type WorkoutProgram = typeof workoutPrograms.$inferSelect;\nexport type InsertWorkoutProgram = z.infer<typeof insertWorkoutProgramSchema>;\n\nexport type TrainingDay = typeof trainingDays.$inferSelect;\nexport type InsertTrainingDay = z.infer<typeof insertTrainingDaySchema>;\n\nexport type Exercise = typeof exercises.$inferSelect;\nexport type InsertExercise = z.infer<typeof insertExerciseSchema>;\n\nexport type WorkoutSession = typeof workoutSessions.$inferSelect;\nexport type InsertWorkoutSession = z.infer<typeof insertWorkoutSessionSchema>;\n\nexport type ExerciseCompletion = typeof exerciseCompletions.$inferSelect;\nexport type InsertExerciseCompletion = z.infer<typeof insertExerciseCompletionSchema>;\n\nexport type UserSettings = typeof userSettings.$inferSelect;\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n","size_bytes":4759},"client/public/sw.js":{"content":"const CACHE_NAME = 'fitflow-v1';\nconst urlsToCache = [\n  '/',\n  '/manifest.json',\n  'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'\n];\n\n// Install event\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        // Return cached version or fetch from network\n        return response || fetch(event.request);\n      }\n    )\n  );\n});\n\n// Activate event\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Background sync for offline workout data\nself.addEventListener('sync', event => {\n  if (event.tag === 'workout-sync') {\n    event.waitUntil(syncWorkoutData());\n  }\n});\n\nasync function syncWorkoutData() {\n  // Sync workout progress when connection is restored\n  const pendingData = localStorage.getItem('fitflow-pending-sync');\n  if (pendingData) {\n    try {\n      // Send data to server\n      const response = await fetch('/api/sync-workout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: pendingData\n      });\n      \n      if (response.ok) {\n        localStorage.removeItem('fitflow-pending-sync');\n      }\n    } catch (error) {\n      console.log('Sync failed, will retry later');\n    }\n  }\n}\n\n// Push notifications\nself.addEventListener('push', event => {\n  const options = {\n    body: event.data ? event.data.text() : 'Time for your workout!',\n    icon: '/manifest-icon-192.png',\n    badge: '/manifest-icon-192.png',\n    vibrate: [100, 50, 100],\n    actions: [\n      {\n        action: 'start-workout',\n        title: 'Start Workout'\n      },\n      {\n        action: 'remind-later', \n        title: 'Remind Me Later'\n      }\n    ]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('FitFlow', options)\n  );\n});\n\n// Notification click\nself.addEventListener('notificationclick', event => {\n  event.notification.close();\n\n  if (event.action === 'start-workout') {\n    event.waitUntil(\n      clients.openWindow('/?start=workout')\n    );\n  } else if (event.action === 'remind-later') {\n    // Schedule another notification\n    setTimeout(() => {\n      self.registration.showNotification('FitFlow Reminder', {\n        body: 'Your workout is still waiting!',\n        icon: '/manifest-icon-192.png'\n      });\n    }, 30 * 60 * 1000); // 30 minutes later\n  } else {\n    event.waitUntil(\n      clients.openWindow('/')\n    );\n  }\n});\n","size_bytes":2862},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Setup from \"@/pages/setup\";\nimport Overview from \"@/pages/overview\";\nimport Workout from \"@/pages/workout\";\nimport Complete from \"@/pages/complete\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/setup\" component={Setup} />\n      <Route path=\"/overview\" component={Overview} />\n      <Route path=\"/workout/:dayType\" component={Workout} />\n      <Route path=\"/complete\" component={Complete} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <TooltipProvider>\n      <div className=\"min-h-screen bg-app-background\">\n        <Toaster />\n        <Router />\n      </div>\n    </TooltipProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1047},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(0 0% 10.2%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 10.2%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 10.2%);\n  --primary: hsl(14 100% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(207 100% 27%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 1.9608% 90%);\n  --muted-foreground: hsl(0 0% 10.2%);\n  --accent: hsl(210 1.9608% 90%);\n  --accent-foreground: hsl(0 0% 10.2%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(14 100% 60%);\n  --chart-1: hsl(14 100% 60%);\n  --chart-2: hsl(141 84.2% 38%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(0 0% 10.2%);\n  --sidebar-primary: hsl(14 100% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 1.9608% 90%);\n  --sidebar-accent-foreground: hsl(0 0% 10.2%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(14 100% 60%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.75rem;\n  --success: hsl(141 84.2% 38%);\n  --neutral: hsl(220 8.9% 46.1%);\n  --app-background: hsl(210 20% 98%);\n  --text-primary: hsl(0 0% 10.2%);\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 1.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(0 0% 3.9%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(0 0% 3.9%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(14 100% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(207 100% 27%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 14.9%);\n  --muted-foreground: hsl(0 0% 63.9%);\n  --accent: hsl(0 0% 14.9%);\n  --accent-foreground: hsl(0 0% 98%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 14.9%);\n  --input: hsl(0 0% 14.9%);\n  --ring: hsl(14 100% 60%);\n  --app-background: hsl(0 0% 3.9%);\n  --text-primary: hsl(0 0% 98%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    background-color: var(--app-background);\n    color: var(--text-primary);\n  }\n\n  .screen-transition {\n    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;\n  }\n\n  .exercise-card {\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .swipe-indicator {\n    transition: all 0.2s ease-in-out;\n  }\n}\n\n@layer components {\n  .btn-primary {\n    @apply bg-primary text-primary-foreground font-semibold py-4 px-6 rounded-xl shadow-sm transition-colors;\n  }\n  \n  .btn-primary:hover {\n    background-color: hsl(var(--primary) / 0.9);\n  }\n\n  .btn-secondary {\n    @apply bg-muted text-text-primary font-medium py-4 px-6 rounded-xl transition-colors;\n  }\n  \n  .btn-secondary:hover {\n    background-color: hsl(var(--muted) / 0.8);\n  }\n\n  .card-workout {\n    @apply bg-card rounded-xl p-6 shadow-sm border border-border;\n  }\n\n  .input-field {\n    @apply w-full p-3 border border-input rounded-lg bg-background text-foreground;\n  }\n\n  .text-success {\n    color: var(--success);\n  }\n\n  .text-neutral {\n    color: var(--neutral);\n  }\n\n  .bg-success {\n    background-color: var(--success);\n  }\n\n  .bg-app {\n    background-color: var(--app-background);\n  }\n}\n","size_bytes":4248},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/exercise-card.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Play, Pause, SkipForward, CheckCircle } from \"lucide-react\";\n\ninterface ExerciseCardProps {\n  exercise: any;\n  week: number;\n  onComplete: () => void;\n  onSkip: () => void;\n  isActive: boolean;\n}\n\nexport default function ExerciseCard({ exercise, week, onComplete, onSkip, isActive }: ExerciseCardProps) {\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n  const [videoProgress, setVideoProgress] = useState(0);\n  const [videoDuration, setVideoDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  \n  // Video URL - use the exercise's individual video URL or fallback to stub URL\n  const videoUrl = exercise.videoUrl || \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\";\n\n  const getWeekFormula = () => {\n    if (exercise.weekFormulas && exercise.weekFormulas[week.toString()]) {\n      return exercise.weekFormulas[week.toString()];\n    }\n    \n    // Default formulas based on week\n    const defaultFormulas = {\n      1: \"3 sets × 8-10 reps @ RPE 6-7\",\n      2: \"3 sets × 10-12 reps @ RPE 6-7\", \n      3: \"4 sets × 8-10 reps @ RPE 7-8\",\n      4: \"4 sets × 12-15 reps @ RPE 7-8\",\n      5: \"4 sets × 10-12 reps @ RPE 8-9\",\n      6: \"5 sets × 8-10 reps @ RPE 8-9\",\n      7: \"5 sets × 12-15 reps @ RPE 9\",\n    };\n    \n    return defaultFormulas[week as keyof typeof defaultFormulas] || \"3 sets × 10 reps\";\n  };\n\n  const getRestTime = () => {\n    if (week <= 2) return \"60-90 seconds between sets\";\n    if (week <= 4) return \"90-120 seconds between sets\";\n    return \"120-180 seconds between sets\";\n  };\n\n  const handlePlayPause = () => {\n    if (videoRef.current) {\n      if (isVideoPlaying) {\n        videoRef.current.pause();\n      } else {\n        videoRef.current.play();\n      }\n      setIsVideoPlaying(!isVideoPlaying);\n    }\n  };\n\n  const handleVideoTimeUpdate = () => {\n    if (videoRef.current) {\n      const current = videoRef.current.currentTime;\n      const duration = videoRef.current.duration;\n      setCurrentTime(current);\n      setVideoProgress((current / duration) * 100);\n    }\n  };\n\n  const handleVideoLoadedMetadata = () => {\n    if (videoRef.current) {\n      setVideoDuration(videoRef.current.duration);\n    }\n  };\n\n  const handleVideoEnded = () => {\n    setIsVideoPlaying(false);\n    setVideoProgress(0);\n    setCurrentTime(0);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (!isActive) {\n    return (\n      <Card className=\"h-full opacity-50\">\n        <div className=\"relative bg-gray-900 rounded-t-xl overflow-hidden\" style={{ height: \"40%\" }}>\n          <video\n            src={videoUrl}\n            className=\"w-full h-full object-cover\"\n            preload=\"metadata\"\n            muted\n          />\n          <div className=\"absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center\">\n            <div className=\"w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center\">\n              <Play className=\"text-white h-4 w-4 ml-0.5\" />\n            </div>\n          </div>\n        </div>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-bold text-text-primary\">{exercise.name}</h3>\n          <p className=\"text-neutral\">Next Exercise</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"h-full shadow-lg\">\n      {/* Video Section */}\n      <div className=\"relative bg-gray-900 rounded-t-xl overflow-hidden\" style={{ height: \"40%\" }}>\n        <video\n          ref={videoRef}\n          src={videoUrl}\n          className=\"w-full h-full object-cover\"\n          onTimeUpdate={handleVideoTimeUpdate}\n          onLoadedMetadata={handleVideoLoadedMetadata}\n          onEnded={handleVideoEnded}\n          onPlay={() => setIsVideoPlaying(true)}\n          onPause={() => setIsVideoPlaying(false)}\n          playsInline\n          preload=\"metadata\"\n        />\n        \n        {/* Play/Pause Overlay */}\n        <div className=\"absolute inset-0 bg-black bg-opacity-20 flex items-center justify-center\">\n          <Button\n            size=\"lg\"\n            onClick={handlePlayPause}\n            className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center shadow-lg hover:bg-primary/90 transition-all\"\n          >\n            {isVideoPlaying ? (\n              <Pause className=\"text-white h-6 w-6\" />\n            ) : (\n              <Play className=\"text-white h-6 w-6 ml-1\" />\n            )}\n          </Button>\n        </div>\n        \n        {/* Video Controls */}\n        <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-4\">\n          <div className=\"flex items-center justify-between text-white text-sm\">\n            <span>{formatTime(currentTime)}</span>\n            <div className=\"flex-1 mx-4\">\n              <div className=\"bg-gray-600 rounded-full h-1\">\n                <div \n                  className=\"bg-primary rounded-full h-1 transition-all\" \n                  style={{ width: `${videoProgress}%` }}\n                />\n              </div>\n            </div>\n            <span>{formatTime(videoDuration)}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Exercise Info */}\n      <CardContent className=\"flex-1 p-6 flex flex-col\">\n        <h3 className=\"text-xl font-bold text-text-primary mb-2\">{exercise.name}</h3>\n        \n        {/* Week-specific Formula */}\n        <div className=\"bg-primary bg-opacity-10 rounded-lg p-4 mb-4\">\n          <h4 className=\"font-semibold text-text-primary mb-2\">Week {week} Formula</h4>\n          <p className=\"text-text-primary\">{getWeekFormula()}</p>\n          <p className=\"text-neutral text-sm mt-1\">{getRestTime()}</p>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"flex-1\">\n          <h4 className=\"font-medium text-text-primary mb-3\">Instructions</h4>\n          <ul className=\"space-y-2 text-text-primary text-sm\">\n            {exercise.instructions?.map((instruction: string, index: number) => (\n              <li key={index} className=\"flex items-start\">\n                <span className=\"text-primary mr-2\">•</span>\n                {instruction}\n              </li>\n            )) || (\n              <>\n                <li className=\"flex items-start\">\n                  <span className=\"text-primary mr-2\">•</span>\n                  Hold dumbbell vertically at chest level with both hands\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"text-primary mr-2\">•</span>\n                  Feet shoulder-width apart, toes slightly out\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"text-primary mr-2\">•</span>\n                  Lower until thighs parallel to ground\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"text-primary mr-2\">•</span>\n                  Push through heels to return to start\n                </li>\n              </>\n            )}\n          </ul>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-3 mt-6\">\n          <Button\n            variant=\"outline\"\n            onClick={onSkip}\n            className=\"flex-1 btn-secondary\"\n          >\n            <SkipForward className=\"mr-2 h-4 w-4\" />\n            Skip\n          </Button>\n          <Button\n            onClick={onComplete}\n            className=\"flex-1 btn-primary\"\n          >\n            <CheckCircle className=\"mr-2 h-4 w-4\" />\n            Complete Set\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7932},"client/src/components/swipeable-container.tsx":{"content":"import { useState, useRef, ReactNode } from \"react\";\n\ninterface SwipeableContainerProps {\n  children: ReactNode;\n  onSwipeLeft?: () => void;\n  onSwipeRight?: () => void;\n  currentIndex: number;\n  totalItems: number;\n}\n\nexport default function SwipeableContainer({ \n  children, \n  onSwipeLeft, \n  onSwipeRight, \n  currentIndex, \n  totalItems \n}: SwipeableContainerProps) {\n  const [startX, setStartX] = useState(0);\n  const [currentX, setCurrentX] = useState(0);\n  const [isSwipeInProgress, setIsSwipeInProgress] = useState(false);\n  const [hasMoved, setHasMoved] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    // Prevent swipe on interactive elements\n    const target = e.target as HTMLElement;\n    if (target.closest('button') || target.closest('[role=\"button\"]') || target.closest('video')) {\n      return;\n    }\n    \n    setIsSwipeInProgress(true);\n    setHasMoved(false);\n    setStartX(e.touches[0].clientX);\n    setCurrentX(e.touches[0].clientX);\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!isSwipeInProgress) return;\n    \n    setCurrentX(e.touches[0].clientX);\n    const deltaX = e.touches[0].clientX - startX;\n    \n    // Mark as moved if there's significant movement\n    if (Math.abs(deltaX) > 10) {\n      setHasMoved(true);\n    }\n    \n    // Only apply visual feedback for significant movement\n    if (containerRef.current && Math.abs(deltaX) > 20) {\n      containerRef.current.style.transform = `translateX(${deltaX}px)`;\n      containerRef.current.style.opacity = `${1 - Math.abs(deltaX) / 400}`;\n    }\n  };\n\n  const handleTouchEnd = () => {\n    if (!isSwipeInProgress) return;\n    \n    const deltaX = currentX - startX;\n    const threshold = 80;\n    const minSwipeDistance = 80;\n    \n    // Only trigger swipe if there was actual movement AND the user moved enough\n    if (hasMoved && Math.abs(deltaX) > threshold && Math.abs(deltaX) > minSwipeDistance) {\n      if (deltaX > 0 && onSwipeRight && currentIndex > 0) {\n        onSwipeRight();\n      } else if (deltaX < 0 && onSwipeLeft && currentIndex < totalItems - 1) {\n        onSwipeLeft();\n      }\n    }\n    \n    // Reset container position\n    if (containerRef.current) {\n      containerRef.current.style.transform = 'translateX(0)';\n      containerRef.current.style.opacity = '1';\n    }\n    \n    setIsSwipeInProgress(false);\n    setHasMoved(false);\n    setStartX(0);\n    setCurrentX(0);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    // Prevent swipe on interactive elements\n    const target = e.target as HTMLElement;\n    if (target.closest('button') || target.closest('[role=\"button\"]') || target.closest('video')) {\n      return;\n    }\n    \n    setIsSwipeInProgress(true);\n    setHasMoved(false);\n    setStartX(e.clientX);\n    setCurrentX(e.clientX);\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!isSwipeInProgress) return;\n    \n    setCurrentX(e.clientX);\n    const deltaX = e.clientX - startX;\n    \n    // Mark as moved if there's significant movement\n    if (Math.abs(deltaX) > 10) {\n      setHasMoved(true);\n    }\n    \n    // Only apply visual feedback for significant movement\n    if (containerRef.current && Math.abs(deltaX) > 20) {\n      containerRef.current.style.transform = `translateX(${deltaX}px)`;\n      containerRef.current.style.opacity = `${1 - Math.abs(deltaX) / 400}`;\n    }\n  };\n\n  const handleMouseUp = () => {\n    if (!isSwipeInProgress) return;\n    \n    const deltaX = currentX - startX;\n    const threshold = 80;\n    const minSwipeDistance = 80;\n    \n    // Only trigger swipe if there was actual movement AND the user moved enough\n    if (hasMoved && Math.abs(deltaX) > threshold && Math.abs(deltaX) > minSwipeDistance) {\n      if (deltaX > 0 && onSwipeRight && currentIndex > 0) {\n        onSwipeRight();\n      } else if (deltaX < 0 && onSwipeLeft && currentIndex < totalItems - 1) {\n        onSwipeLeft();\n      }\n    }\n    \n    // Reset container position\n    if (containerRef.current) {\n      containerRef.current.style.transform = 'translateX(0)';\n      containerRef.current.style.opacity = '1';\n    }\n    \n    setIsSwipeInProgress(false);\n    setHasMoved(false);\n    setStartX(0);\n    setCurrentX(0);\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"exercise-card transition-transform duration-300 ease-out\"\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n      onMouseDown={handleMouseDown}\n      onMouseMove={handleMouseMove}\n      onMouseUp={handleMouseUp}\n      onMouseLeave={handleMouseUp}\n      style={{ userSelect: 'none' }}\n    >\n      {children}\n    </div>\n  );\n}\n","size_bytes":4697},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-timer.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\n\nexport function useTimer() {\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isRunning) {\n      intervalRef.current = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning]);\n\n  const start = () => {\n    setIsRunning(true);\n  };\n\n  const pause = () => {\n    setIsRunning(false);\n  };\n\n  const reset = () => {\n    setIsRunning(false);\n    setTime(0);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return {\n    time,\n    isRunning,\n    start,\n    pause,\n    reset,\n    formatTime: () => formatTime(time),\n  };\n}\n","size_bytes":1133},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-workout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { workoutData } from \"@/lib/workout-data\";\n\nexport function useWorkout() {\n  const [currentWeek, setCurrentWeek] = useState<number>(1);\n  const [totalWorkouts, setTotalWorkouts] = useState<number>(0);\n  const [streak, setStreak] = useState<number>(0);\n  const [userSettings, setUserSettings] = useState({\n    goal: \"general_fitness\",\n    experience: \"beginner\",\n    equipment: [\"bodyweight\", \"dumbbells\"]\n  });\n\n  // Load user data from localStorage on mount\n  useEffect(() => {\n    const savedWeek = localStorage.getItem(\"fitflow-current-week\");\n    const savedSettings = localStorage.getItem(\"fitflow-user-settings\");\n    \n    if (savedWeek) {\n      setCurrentWeek(parseInt(savedWeek, 10));\n    }\n    \n    if (savedSettings) {\n      setUserSettings(JSON.parse(savedSettings));\n    }\n\n    // Calculate stats\n    const completedWorkouts = JSON.parse(localStorage.getItem(\"fitflow-completed-workouts\") || \"[]\");\n    setTotalWorkouts(completedWorkouts.length);\n    calculateStreak(completedWorkouts);\n  }, []);\n\n  // Save current week to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem(\"fitflow-current-week\", currentWeek.toString());\n  }, [currentWeek]);\n\n  // Save user settings to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem(\"fitflow-user-settings\", JSON.stringify(userSettings));\n  }, [userSettings]);\n\n  const calculateStreak = (completedWorkouts: string[]) => {\n    if (completedWorkouts.length === 0) {\n      setStreak(0);\n      return;\n    }\n\n    // Sort workouts by date and calculate consecutive days\n    const workoutDates = completedWorkouts\n      .map(workout => new Date(workout.split('-').slice(2).join('-')))\n      .sort((a, b) => b.getTime() - a.getTime());\n\n    let currentStreak = 1;\n    const today = new Date();\n    \n    // Check if most recent workout was today or yesterday\n    const mostRecent = workoutDates[0];\n    const daysDiff = Math.floor((today.getTime() - mostRecent.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (daysDiff > 1) {\n      setStreak(0);\n      return;\n    }\n\n    // Count consecutive days\n    for (let i = 1; i < workoutDates.length; i++) {\n      const diff = Math.floor((workoutDates[i-1].getTime() - workoutDates[i].getTime()) / (1000 * 60 * 60 * 24));\n      if (diff <= 2) { // Allow for rest days\n        currentStreak++;\n      } else {\n        break;\n      }\n    }\n\n    setStreak(currentStreak);\n  };\n\n  const progressToNextWeek = () => {\n    if (currentWeek < 7) {\n      setCurrentWeek(currentWeek + 1);\n    }\n  };\n\n  const updateUserSettings = (newSettings: Partial<typeof userSettings>) => {\n    setUserSettings(prev => ({ ...prev, ...newSettings }));\n  };\n\n  const getCompletedWorkouts = () => {\n    const completed = JSON.parse(localStorage.getItem(\"fitflow-completed-workouts\") || \"[]\");\n    return completed;\n  };\n\n  const isWorkoutCompleted = (dayType: string, week?: number) => {\n    const weekToCheck = week || currentWeek;\n    const completed = getCompletedWorkouts();\n    return completed.some((workout: string) => \n      workout.startsWith(`${weekToCheck}-${dayType}`)\n    );\n  };\n\n  const getWeeklyProgress = () => {\n    const completed = getCompletedWorkouts();\n    const currentWeekWorkouts = completed.filter((workout: string) => \n      workout.startsWith(`${currentWeek}-`)\n    );\n    return {\n      completed: currentWeekWorkouts.length,\n      total: 3, // A, B, C\n      percentage: Math.round((currentWeekWorkouts.length / 3) * 100)\n    };\n  };\n\n  // Check if user should auto-progress to next week\n  const checkAutoProgression = () => {\n    const weeklyProgress = getWeeklyProgress();\n    if (weeklyProgress.completed >= 3 && currentWeek < 7) {\n      const lastWorkoutDate = localStorage.getItem(\"fitflow-last-workout-date\");\n      const daysSinceLastWorkout = lastWorkoutDate ? \n        Math.floor((Date.now() - new Date(lastWorkoutDate).getTime()) / (1000 * 60 * 60 * 24)) : 0;\n      \n      // Auto-progress if all workouts completed and it's been at least 1 day\n      if (daysSinceLastWorkout >= 1) {\n        progressToNextWeek();\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const getWorkoutByDay = (dayType: string) => {\n    const workout = workoutData.workouts[dayType as keyof typeof workoutData.workouts];\n    if (!workout) return null;\n\n    // Combine warm-up, main training, and cool-down exercises\n    return {\n      name: workout.name,\n      type: workout.type,\n      warmUp: workoutData.warmUpExercises,\n      mainTraining: workout.exercises,\n      coolDown: workoutData.coolDownExercises\n    };\n  };\n\n  const getExerciseFormula = (exerciseId: string, week: number) => {\n    // Find exercises from all sources\n    const allExercises = [\n      ...workoutData.warmUpExercises,\n      ...workoutData.coolDownExercises,\n      ...workoutData.workouts.A.exercises,\n      ...workoutData.workouts.B.exercises,\n      ...workoutData.workouts.C.exercises,\n    ];\n    \n    const exercise = allExercises.find(ex => ex.id === exerciseId);\n    if (exercise && exercise.weekFormulas) {\n      const weekKey = week.toString() as keyof typeof exercise.weekFormulas;\n      return exercise.weekFormulas[weekKey] || \"3 sets × 10 reps\";\n    }\n    return \"3 sets × 10 reps\";\n  };\n\n  const getTrainingDays = () => {\n    return workoutData.trainingDays;\n  };\n\n  return {\n    currentWeek,\n    setCurrentWeek,\n    totalWorkouts,\n    streak,\n    userSettings,\n    workoutData,\n    progressToNextWeek,\n    updateUserSettings,\n    getCompletedWorkouts,\n    isWorkoutCompleted,\n    getWeeklyProgress,\n    checkAutoProgression,\n    getWorkoutByDay,\n    getExerciseFormula,\n    getTrainingDays\n  };\n};","size_bytes":5677},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/workout-data.ts":{"content":"export const workoutData = {\n  trainingDays: [\n    {\n      type: \"A\",\n      name: \"Day A - Upper Body\",\n      exercises: 9, // 3 warm-up + 3 main + 3 cool-down\n      duration: \"45-60\"\n    },\n    {\n      type: \"B\", \n      name: \"Day B - Lower Body\",\n      exercises: 9, // 3 warm-up + 3 main + 3 cool-down\n      duration: \"50-65\"\n    },\n    {\n      type: \"C\",\n      name: \"Day C - Full Body\", \n      exercises: 9, // 3 warm-up + 3 main + 3 cool-down\n      duration: \"55-70\"\n    }\n  ],\n\n  // Common warm-up exercises for all training days\n  warmUpExercises: [\n    {\n      id: \"arm-circles\",\n      name: \"Arm Circles\",\n      phase: \"warm-up\",\n      instructions: [\n        \"Stand with feet shoulder-width apart\",\n        \"Extend arms out to sides at shoulder height\",\n        \"Make small circles forward for 30 seconds\",\n        \"Reverse direction for 30 seconds\"\n      ],\n      imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      weekFormulas: {\n        \"1\": \"2 sets × 30 seconds each direction\",\n        \"2\": \"2 sets × 30 seconds each direction\",\n        \"3\": \"2 sets × 45 seconds each direction\",\n        \"4\": \"2 sets × 45 seconds each direction\",\n        \"5\": \"3 sets × 30 seconds each direction\",\n        \"6\": \"3 sets × 45 seconds each direction\",\n        \"7\": \"3 sets × 60 seconds each direction\"\n      }\n    },\n    {\n      id: \"jumping-jacks\",\n      name: \"Jumping Jacks\",\n      phase: \"warm-up\",\n      instructions: [\n        \"Start with feet together, arms at sides\",\n        \"Jump while spreading legs shoulder-width apart\",\n        \"Raise arms overhead simultaneously\",\n        \"Jump back to starting position\"\n      ],\n      imageUrl: \"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      weekFormulas: {\n        \"1\": \"2 sets × 20 reps\",\n        \"2\": \"2 sets × 25 reps\",\n        \"3\": \"3 sets × 20 reps\",\n        \"4\": \"3 sets × 25 reps\",\n        \"5\": \"3 sets × 30 reps\",\n        \"6\": \"4 sets × 25 reps\",\n        \"7\": \"4 sets × 30 reps\"\n      }\n    },\n    {\n      id: \"dynamic-stretches\",\n      name: \"Dynamic Stretches\",\n      phase: \"warm-up\",\n      instructions: [\n        \"Leg swings forward and back\",\n        \"Arm swings across body\",\n        \"Hip circles in both directions\",\n        \"Light bodyweight movements\"\n      ],\n      imageUrl: \"https://images.unsplash.com/photo-1566241138256-8a1b8c96ce6b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      weekFormulas: {\n        \"1\": \"5 reps each movement\",\n        \"2\": \"8 reps each movement\",\n        \"3\": \"10 reps each movement\",\n        \"4\": \"10 reps each movement\",\n        \"5\": \"12 reps each movement\",\n        \"6\": \"15 reps each movement\",\n        \"7\": \"15 reps each movement\"\n      }\n    }\n  ],\n\n  // Common cool-down exercises for all training days\n  coolDownExercises: [\n    {\n      id: \"deep-breathing\",\n      name: \"Deep Breathing\",\n      phase: \"cool-down\",\n      instructions: [\n        \"Lie on back with knees bent\",\n        \"Place one hand on chest, one on belly\",\n        \"Breathe deeply through nose\",\n        \"Feel belly rise more than chest\"\n      ],\n      imageUrl: \"https://images.unsplash.com/photo-1517344643866-caa9c1b912f9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      weekFormulas: {\n        \"1\": \"2 minutes\",\n        \"2\": \"2 minutes\",\n        \"3\": \"3 minutes\",\n        \"4\": \"3 minutes\",\n        \"5\": \"4 minutes\",\n        \"6\": \"4 minutes\",\n        \"7\": \"5 minutes\"\n      }\n    },\n    {\n      id: \"full-body-stretch\",\n      name: \"Full Body Stretch\",\n      phase: \"cool-down\",\n      instructions: [\n        \"Stretch major muscle groups worked\",\n        \"Hold each stretch for 30 seconds\",\n        \"Focus on areas that feel tight\",\n        \"Breathe deeply and relax\"\n      ],\n      imageUrl: \"https://images.unsplash.com/photo-1506629905607-45dd3394b0b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      weekFormulas: {\n        \"1\": \"30 seconds per stretch\",\n        \"2\": \"30 seconds per stretch\",\n        \"3\": \"45 seconds per stretch\",\n        \"4\": \"45 seconds per stretch\",\n        \"5\": \"60 seconds per stretch\",\n        \"6\": \"60 seconds per stretch\",\n        \"7\": \"90 seconds per stretch\"\n      }\n    },\n    {\n      id: \"meditation\",\n      name: \"Mindful Relaxation\",\n      phase: \"cool-down\",\n      instructions: [\n        \"Sit or lie in comfortable position\",\n        \"Close eyes and focus on breathing\",\n        \"Let thoughts pass without judgment\",\n        \"Feel gratitude for completed workout\"\n      ],\n      imageUrl: \"https://images.unsplash.com/photo-1506804830734-32b0d1d8e8e1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      weekFormulas: {\n        \"1\": \"2 minutes\",\n        \"2\": \"2 minutes\",\n        \"3\": \"3 minutes\",\n        \"4\": \"3 minutes\",\n        \"5\": \"4 minutes\",\n        \"6\": \"5 minutes\",\n        \"7\": \"5 minutes\"\n      }\n    }\n  ],\n\n  // Main training exercises for each specific workout day\n  workouts: {\n    A: {\n      name: \"Day A - Upper Body\",\n      type: \"A\",\n      exercises: [\n        {\n          id: \"push-ups\",\n          name: \"Push-ups\",\n          phase: \"main-training\",\n          instructions: [\n            \"Start in plank position with hands shoulder-width apart\",\n            \"Lower your body until chest nearly touches floor\",\n            \"Push back up to starting position\",\n            \"Keep core tight throughout movement\"\n          ],\n          imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n          weekFormulas: {\n            \"1\": \"3 sets × 8-12 reps @ RPE 6-7\",\n            \"2\": \"3 sets × 10-15 reps @ RPE 6-7\",\n            \"3\": \"4 sets × 8-12 reps @ RPE 7\",\n            \"4\": \"4 sets × 10-15 reps @ RPE 7-8\",\n            \"5\": \"4 sets × 12-15 reps @ RPE 8\",\n            \"6\": \"5 sets × 8-12 reps @ RPE 8-9\",\n            \"7\": \"5 sets × 12-15 reps @ RPE 9\"\n          }\n        },\n        {\n          id: \"dumbbell-rows\",\n          name: \"Dumbbell Rows\",\n          phase: \"main-training\",\n          instructions: [\n            \"Bend at waist with dumbbell in one hand\",\n            \"Support yourself with other hand on bench\",\n            \"Pull dumbbell to lower chest/upper abdomen\",\n            \"Lower with control and repeat\"\n          ],\n          imageUrl: \"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n          weekFormulas: {\n            \"1\": \"3 sets × 8-12 reps @ RPE 6-7\",\n            \"2\": \"3 sets × 10-15 reps @ RPE 6-7\",\n            \"3\": \"4 sets × 8-12 reps @ RPE 7\",\n            \"4\": \"4 sets × 10-15 reps @ RPE 7-8\",\n            \"5\": \"4 sets × 12-15 reps @ RPE 8\",\n            \"6\": \"5 sets × 8-12 reps @ RPE 8-9\",\n            \"7\": \"5 sets × 12-15 reps @ RPE 9\"\n          }\n        },\n        {\n          id: \"overhead-press\",\n          name: \"Overhead Press\",\n          phase: \"main-training\",\n          instructions: [\n            \"Hold dumbbells at shoulder height\",\n            \"Press weights straight overhead\",\n            \"Lower with control back to shoulders\",\n            \"Keep core engaged throughout\"\n          ],\n          imageUrl: \"https://images.unsplash.com/photo-1566241138256-8a1b8c96ce6b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n          weekFormulas: {\n            \"1\": \"3 sets × 8-12 reps @ RPE 6-7\",\n            \"2\": \"3 sets × 10-15 reps @ RPE 6-7\",\n            \"3\": \"4 sets × 8-12 reps @ RPE 7\",\n            \"4\": \"4 sets × 10-15 reps @ RPE 7-8\",\n            \"5\": \"4 sets × 12-15 reps @ RPE 8\",\n            \"6\": \"5 sets × 8-12 reps @ RPE 8-9\",\n            \"7\": \"5 sets × 12-15 reps @ RPE 9\"\n          }\n        }\n      ]\n    },\n\n    B: {\n      name: \"Day B - Lower Body\",\n      type: \"B\",\n      exercises: [\n        {\n          id: \"squats\",\n          name: \"Bodyweight Squats\",\n          phase: \"main-training\",\n          instructions: [\n            \"Stand with feet shoulder-width apart\",\n            \"Lower down as if sitting back into chair\",\n            \"Keep chest up and knees in line with toes\",\n            \"Push through heels to return to standing\"\n          ],\n          imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n          weekFormulas: {\n            \"1\": \"3 sets × 15-20 reps @ RPE 6-7\",\n            \"2\": \"3 sets × 20-25 reps @ RPE 6-7\",\n            \"3\": \"4 sets × 15-20 reps @ RPE 7\",\n            \"4\": \"4 sets × 20-25 reps @ RPE 7-8\",\n            \"5\": \"4 sets × 25-30 reps @ RPE 8\",\n            \"6\": \"5 sets × 15-20 reps @ RPE 8-9\",\n            \"7\": \"5 sets × 25-30 reps @ RPE 9\"\n          }\n        },\n        {\n          id: \"deadlifts\",\n          name: \"Romanian Deadlifts\", \n          phase: \"main-training\",\n          instructions: [\n            \"Hold barbell or dumbbells with overhand grip\",\n            \"Hinge at hips while keeping knees slightly bent\",\n            \"Lower weight until you feel stretch in hamstrings\",\n            \"Drive hips forward to return to standing\"\n          ],\n          imageUrl: \"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n          weekFormulas: {\n            \"1\": \"3 sets × 8-12 reps @ RPE 6-7\",\n            \"2\": \"3 sets × 10-15 reps @ RPE 6-7\",\n            \"3\": \"4 sets × 8-12 reps @ RPE 7\",\n            \"4\": \"4 sets × 10-15 reps @ RPE 7-8\",\n            \"5\": \"4 sets × 12-15 reps @ RPE 8\",\n            \"6\": \"5 sets × 8-12 reps @ RPE 8-9\", \n            \"7\": \"5 sets × 12-15 reps @ RPE 9\"\n          }\n        },\n        {\n          id: \"lunges\",\n          name: \"Walking Lunges\",\n          phase: \"main-training\",\n          instructions: [\n            \"Step forward into lunge position\",\n            \"Lower back knee toward ground\",\n            \"Push off front foot to step into next lunge\",\n            \"Alternate legs with each step forward\"\n          ],\n          imageUrl: \"https://images.unsplash.com/photo-1566241138256-8a1b8c96ce6b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n          weekFormulas: {\n            \"1\": \"3 sets × 20 steps @ RPE 6-7\",\n            \"2\": \"3 sets × 24 steps @ RPE 6-7\", \n            \"3\": \"4 sets × 20 steps @ RPE 7\",\n            \"4\": \"4 sets × 24 steps @ RPE 7-8\",\n            \"5\": \"4 sets × 28 steps @ RPE 8\",\n            \"6\": \"5 sets × 20 steps @ RPE 8-9\",\n            \"7\": \"5 sets × 28 steps @ RPE 9\"\n          }\n        }\n      ]\n    },\n\n    C: {\n      name: \"Day C - Full Body\",\n      type: \"C\",\n      exercises: [\n        {\n          id: \"burpees\",\n          name: \"Burpees\",\n          phase: \"main-training\",\n          instructions: [\n            \"Start standing, drop into squat position\",\n            \"Jump feet back to plank position\",\n            \"Do a push-up, then jump feet back to squat\",\n            \"Jump up with arms overhead\"\n          ],\n          imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n          weekFormulas: {\n            \"1\": \"3 sets × 5-8 reps @ RPE 6-7\",\n            \"2\": \"3 sets × 8-10 reps @ RPE 6-7\",\n            \"3\": \"4 sets × 5-8 reps @ RPE 7\",\n            \"4\": \"4 sets × 8-10 reps @ RPE 7-8\",\n            \"5\": \"4 sets × 10-12 reps @ RPE 8\",\n            \"6\": \"5 sets × 5-8 reps @ RPE 8-9\",\n            \"7\": \"5 sets × 10-12 reps @ RPE 9\"\n          }\n        },\n        {\n          id: \"mountain-climbers\",\n          name: \"Mountain Climbers\",\n          phase: \"main-training\",\n          instructions: [\n            \"Start in plank position\",\n            \"Bring right knee toward chest quickly\",\n            \"Switch legs in running motion\",\n            \"Keep hips level and core engaged\"\n          ],\n          imageUrl: \"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n          weekFormulas: {\n            \"1\": \"3 sets × 30 seconds @ RPE 6-7\",\n            \"2\": \"3 sets × 45 seconds @ RPE 6-7\",\n            \"3\": \"4 sets × 30 seconds @ RPE 7\",\n            \"4\": \"4 sets × 45 seconds @ RPE 7-8\",\n            \"5\": \"4 sets × 60 seconds @ RPE 8\",\n            \"6\": \"5 sets × 30 seconds @ RPE 8-9\",\n            \"7\": \"5 sets × 60 seconds @ RPE 9\"\n          }\n        },\n        {\n          id: \"plank\",\n          name: \"Plank Hold\",\n          phase: \"main-training\",\n          instructions: [\n            \"Start in forearm plank position\",\n            \"Keep body in straight line from head to heels\",\n            \"Engage core and breathe normally\",\n            \"Hold for prescribed time\"\n          ],\n          imageUrl: \"https://images.unsplash.com/photo-1566241138256-8a1b8c96ce6b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          videoUrl: \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n          weekFormulas: {\n            \"1\": \"3 sets × 30 seconds @ RPE 6-7\",\n            \"2\": \"3 sets × 45 seconds @ RPE 6-7\",\n            \"3\": \"4 sets × 30 seconds @ RPE 7\",\n            \"4\": \"4 sets × 45 seconds @ RPE 7-8\",\n            \"5\": \"4 sets × 60 seconds @ RPE 8\",\n            \"6\": \"5 sets × 45 seconds @ RPE 8-9\",\n            \"7\": \"5 sets × 90 seconds @ RPE 9\"\n          }\n        }\n      ]\n    }\n  }\n};","size_bytes":14760},"client/src/pages/complete.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CheckCircle, Share } from \"lucide-react\";\n\nexport default function Complete() {\n  const [, setLocation] = useLocation();\n  const [workoutStats, setWorkoutStats] = useState<{\n    duration: number;\n    exercisesCompleted: number;\n    totalExercises: number;\n    caloriesBurned: number;\n    dayType: string;\n    week: number;\n    completedAt: string;\n  } | null>(null);\n\n  useEffect(() => {\n    const stats = localStorage.getItem(\"fitflow-last-workout\");\n    if (stats) {\n      setWorkoutStats(JSON.parse(stats));\n    }\n  }, []);\n\n  const handleBackToOverview = () => {\n    setLocation(\"/overview\");\n  };\n\n  const handleShareWorkout = () => {\n    if (navigator.share && workoutStats) {\n      navigator.share({\n        title: \"FitFlow Workout Complete!\",\n        text: `Just completed a ${formatTime(workoutStats.duration)} workout with ${workoutStats.exercisesCompleted} exercises!`,\n        url: window.location.origin,\n      });\n    } else {\n      // Fallback for browsers that don't support Web Share API\n      const shareText = `Just completed a ${workoutStats ? formatTime(workoutStats.duration) : ''} workout with FitFlow! 💪`;\n      navigator.clipboard.writeText(shareText);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getNextWorkoutInfo = () => {\n    if (!workoutStats) return { day: \"Next Workout\", exercises: \"8\" };\n    \n    const dayMap = { \"A\": \"B\", \"B\": \"C\", \"C\": \"A\" };\n    const nameMap = { \n      \"A\": \"Day A - Upper Body\", \n      \"B\": \"Day B - Lower Body\", \n      \"C\": \"Day C - Full Body\" \n    };\n    \n    const nextDay = dayMap[workoutStats.dayType] || \"A\";\n    return {\n      day: nameMap[nextDay],\n      exercises: nextDay === \"C\" ? \"8\" : nextDay === \"B\" ? \"7\" : \"6\"\n    };\n  };\n\n  const nextWorkout = getNextWorkoutInfo();\n\n  if (!workoutStats) {\n    return (\n      <div className=\"min-h-screen bg-app-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mb-4\"></div>\n          <p className=\"text-neutral\">Loading workout results...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-app-background p-5 pt-12 text-center\">\n      {/* Success Animation Area */}\n      <div className=\"mb-8\">\n        <div className=\"w-24 h-24 bg-success rounded-full flex items-center justify-center mx-auto mb-4\">\n          <CheckCircle className=\"text-white h-12 w-12\" />\n        </div>\n        <h1 className=\"text-2xl font-bold text-text-primary mb-2\">Workout Complete!</h1>\n        <p className=\"text-neutral\">Great job finishing {workoutStats.dayType === \"A\" ? \"Day A\" : workoutStats.dayType === \"B\" ? \"Day B\" : \"Day C\"}</p>\n      </div>\n\n      {/* Workout Statistics */}\n      <div className=\"space-y-4 mb-8 max-w-md mx-auto\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <p className=\"text-2xl font-bold text-text-primary\">{formatTime(workoutStats.duration)}</p>\n                <p className=\"text-neutral text-sm\">Duration</p>\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-text-primary\">{workoutStats.exercisesCompleted}</p>\n                <p className=\"text-neutral text-sm\">Exercises</p>\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-text-primary\">{workoutStats.caloriesBurned}</p>\n                <p className=\"text-neutral text-sm\">Calories</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Exercise Summary */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-text-primary mb-4 text-left\">Exercise Summary</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-text-primary\">Goblet Squats</span>\n                <span className=\"text-success\">\n                  <CheckCircle className=\"inline h-4 w-4 mr-1\" />\n                  4 sets\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-text-primary\">Romanian Deadlifts</span>\n                <span className=\"text-success\">\n                  <CheckCircle className=\"inline h-4 w-4 mr-1\" />\n                  4 sets\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-text-primary\">Walking Lunges</span>\n                <span className=\"text-success\">\n                  <CheckCircle className=\"inline h-4 w-4 mr-1\" />\n                  3 sets\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next Workout Preview */}\n        <div className=\"bg-gradient-to-r from-primary to-orange-500 rounded-xl p-6 text-white\">\n          <h3 className=\"font-semibold mb-2\">Next Workout</h3>\n          <p className=\"mb-3\">{nextWorkout.day} • {nextWorkout.exercises} exercises</p>\n          <p className=\"text-sm opacity-90\">Recommended rest: 1-2 days</p>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"space-y-3 max-w-md mx-auto\">\n        <Button \n          onClick={handleBackToOverview}\n          className=\"w-full btn-primary\"\n        >\n          Back to Overview\n        </Button>\n        <Button \n          variant=\"outline\"\n          onClick={handleShareWorkout}\n          className=\"w-full btn-secondary\"\n        >\n          <Share className=\"mr-2 h-4 w-4\" />\n          Share Workout\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6122},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Check if user has completed setup\n    const hasCompletedSetup = localStorage.getItem(\"fitflow-setup-complete\");\n    \n    if (hasCompletedSetup) {\n      setLocation(\"/overview\");\n    } else {\n      setLocation(\"/setup\");\n    }\n  }, [setLocation]);\n\n  return (\n    <div className=\"min-h-screen bg-app-background flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n          <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n          </svg>\n        </div>\n        <h1 className=\"text-2xl font-bold text-text-primary mb-2\">FitFlow</h1>\n        <p className=\"text-neutral\">Loading...</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1085},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/overview.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Settings, ChevronRight, CheckCircle, PlayCircle, Clock, Flame, Trophy } from \"lucide-react\";\nimport { useWorkout } from \"@/hooks/use-workout\";\n\nexport default function Overview() {\n  const [, setLocation] = useLocation();\n  const { currentWeek, totalWorkouts, streak, getTrainingDays } = useWorkout();\n  const [trainingDays, setTrainingDays] = useState<Array<{\n    type: string;\n    name: string;\n    exercises: number;\n    duration: string;\n  }>>([]);\n\n  useEffect(() => {\n    setTrainingDays(getTrainingDays());\n  }, [currentWeek]);\n\n  const handleStartWorkout = (dayType: string) => {\n    setLocation(`/workout/${dayType}`);\n  };\n\n  const openSettings = () => {\n    setLocation(\"/settings\");\n  };\n\n  const weekProgress = (currentWeek / 7) * 100;\n\n  const getDayStatus = (dayType: string) => {\n    const completedWorkouts = JSON.parse(localStorage.getItem(\"fitflow-completed-workouts\") || \"[]\");\n    const todayKey = `${currentWeek}-${dayType}-${new Date().toDateString()}`;\n    \n    if (completedWorkouts.includes(todayKey)) {\n      return { status: \"completed\", icon: CheckCircle, color: \"text-success\", text: \"Completed\" };\n    }\n    \n    // Check if this is the next scheduled workout\n    const lastCompletedDay = completedWorkouts[completedWorkouts.length - 1];\n    if (!lastCompletedDay || shouldShowAsReady(dayType, lastCompletedDay)) {\n      return { status: \"ready\", icon: PlayCircle, color: \"text-primary\", text: \"Ready to start\" };\n    }\n    \n    return { status: \"scheduled\", icon: Clock, color: \"text-neutral\", text: \"Scheduled\" };\n  };\n\n  const shouldShowAsReady = (dayType: string, lastCompleted: string) => {\n    // Simple logic: show first uncompleted day as ready\n    return true;\n  };\n\n  const getBorderColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"border-l-success\";\n      case \"ready\": return \"border-l-primary\";\n      default: return \"border-l-muted\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-app-background\">\n      {/* Header */}\n      <div className=\"bg-secondary text-white p-5 pt-12\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-xl font-bold\">Week {currentWeek}</h1>\n            <p className=\"text-blue-200\">Progressive Training Program</p>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={openSettings}\n            className=\"w-10 h-10 bg-blue-700 border-blue-700 text-white hover:bg-blue-600\"\n          >\n            <Settings className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Progress Bar */}\n        <div className=\"bg-blue-700 rounded-full h-2 mb-4\">\n          <div \n            className=\"bg-primary rounded-full h-2 transition-all duration-300\" \n            style={{ width: `${Math.min(weekProgress, 100)}%` }}\n          />\n        </div>\n        <p className=\"text-sm text-blue-200\">{currentWeek} of 7 weeks completed</p>\n      </div>\n\n      {/* Training Days Grid */}\n      <div className=\"p-5\">\n        <h2 className=\"text-lg font-semibold mb-4 text-text-primary\">This Week's Training</h2>\n        \n        <div className=\"space-y-4\">\n          {trainingDays.map((day) => {\n            const dayStatus = getDayStatus(day.type);\n            const StatusIcon = dayStatus.icon;\n            \n            return (\n              <Card \n                key={day.type}\n                className={`cursor-pointer hover:shadow-md transition-shadow border-l-4 ${getBorderColor(dayStatus.status)}`}\n                onClick={() => handleStartWorkout(day.type)}\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"font-semibold text-text-primary\">{day.name}</h3>\n                      <p className=\"text-neutral text-sm\">{day.exercises} exercises • {day.duration} min</p>\n                      <div className=\"flex items-center mt-2\">\n                        <StatusIcon className={`${dayStatus.color} mr-2 h-4 w-4`} />\n                        <span className={`${dayStatus.color} text-sm`}>{dayStatus.text}</span>\n                      </div>\n                    </div>\n                    <ChevronRight className=\"text-neutral h-5 w-5\" />\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"mt-8 grid grid-cols-2 gap-4\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Flame className=\"text-primary text-2xl mb-2 h-8 w-8 mx-auto\" />\n              <p className=\"text-2xl font-bold text-text-primary\">{totalWorkouts}</p>\n              <p className=\"text-neutral text-sm\">Workouts Done</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Trophy className=\"text-success text-2xl mb-2 h-8 w-8 mx-auto\" />\n              <p className=\"text-2xl font-bold text-text-primary\">{streak}</p>\n              <p className=\"text-neutral text-sm\">Day Streak</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5464},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, Download, RotateCcw } from \"lucide-react\";\nimport { useWorkout } from \"@/hooks/use-workout\";\n\nexport default function Settings() {\n  const [, setLocation] = useLocation();\n  const { currentWeek, setCurrentWeek } = useWorkout();\n  const [autoProgression, setAutoProgression] = useState(true);\n  const [workoutReminders, setWorkoutReminders] = useState(true);\n  const [restDayAlerts, setRestDayAlerts] = useState(false);\n\n  useEffect(() => {\n    // Load settings from localStorage\n    const setupData = localStorage.getItem(\"fitflow-setup\");\n    if (setupData) {\n      const setup = JSON.parse(setupData);\n      setAutoProgression(setup.autoProgression || true);\n    }\n    \n    const settings = localStorage.getItem(\"fitflow-settings\");\n    if (settings) {\n      const userSettings = JSON.parse(settings);\n      setWorkoutReminders(userSettings.workoutReminders ?? true);\n      setRestDayAlerts(userSettings.restDayAlerts ?? false);\n    }\n  }, []);\n\n  const handleBackToOverview = () => {\n    setLocation(\"/overview\");\n  };\n\n  const incrementWeek = () => {\n    if (currentWeek < 12) {\n      const newWeek = currentWeek + 1;\n      setCurrentWeek(newWeek);\n      updateSetupData({ currentWeek: newWeek });\n    }\n  };\n\n  const decrementWeek = () => {\n    if (currentWeek > 1) {\n      const newWeek = currentWeek - 1;\n      setCurrentWeek(newWeek);\n      updateSetupData({ currentWeek: newWeek });\n    }\n  };\n\n  const updateSetupData = (updates: any) => {\n    const setupData = JSON.parse(localStorage.getItem(\"fitflow-setup\") || \"{}\");\n    const updatedData = { ...setupData, ...updates };\n    localStorage.setItem(\"fitflow-setup\", JSON.stringify(updatedData));\n  };\n\n  const updateSettings = (updates: any) => {\n    const settings = JSON.parse(localStorage.getItem(\"fitflow-settings\") || \"{}\");\n    const updatedSettings = { ...settings, ...updates };\n    localStorage.setItem(\"fitflow-settings\", JSON.stringify(updatedSettings));\n  };\n\n  const handleAutoProgressionChange = (checked: boolean) => {\n    setAutoProgression(checked);\n    updateSetupData({ autoProgression: checked });\n  };\n\n  const handleWorkoutRemindersChange = (checked: boolean) => {\n    setWorkoutReminders(checked);\n    updateSettings({ workoutReminders: checked });\n  };\n\n  const handleRestDayAlertsChange = (checked: boolean) => {\n    setRestDayAlerts(checked);\n    updateSettings({ restDayAlerts: checked });\n  };\n\n  const handleExportData = () => {\n    const allData = {\n      setup: JSON.parse(localStorage.getItem(\"fitflow-setup\") || \"{}\"),\n      settings: JSON.parse(localStorage.getItem(\"fitflow-settings\") || \"{}\"),\n      completedWorkouts: JSON.parse(localStorage.getItem(\"fitflow-completed-workouts\") || \"[]\"),\n      exportedAt: new Date().toISOString(),\n    };\n    \n    const dataStr = JSON.stringify(allData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    \n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `fitflow-data-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    \n    URL.revokeObjectURL(url);\n  };\n\n  const handleResetProgress = () => {\n    if (confirm(\"Are you sure you want to reset all progress? This action cannot be undone.\")) {\n      localStorage.removeItem(\"fitflow-completed-workouts\");\n      localStorage.removeItem(\"fitflow-last-workout\");\n      setCurrentWeek(1);\n      updateSetupData({ currentWeek: 1 });\n      alert(\"Progress has been reset successfully.\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-app-background p-5 pt-12\">\n      {/* Header */}\n      <div className=\"flex items-center mb-8\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={handleBackToOverview}\n          className=\"w-10 h-10 bg-muted border-muted text-text-primary hover:bg-muted/80 mr-4\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n        </Button>\n        <h1 className=\"text-xl font-bold text-text-primary\">Settings</h1>\n      </div>\n\n      {/* Settings Sections */}\n      <div className=\"space-y-6 max-w-md mx-auto\">\n        {/* Training Settings */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-text-primary mb-4\">Training Program</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-text-primary\">Current Week</span>\n                <div className=\"flex items-center space-x-3\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={decrementWeek}\n                    disabled={currentWeek <= 1}\n                    className=\"w-8 h-8 p-0\"\n                  >\n                    <span className=\"text-xs\">−</span>\n                  </Button>\n                  <span className=\"text-lg font-bold text-text-primary w-8 text-center\">{currentWeek}</span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={incrementWeek}\n                    disabled={currentWeek >= 12}\n                    className=\"w-8 h-8 p-0\"\n                  >\n                    <span className=\"text-xs\">+</span>\n                  </Button>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-text-primary\">Auto Progression</span>\n                  <p className=\"text-neutral text-sm\">Advance weeks automatically</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input \n                    type=\"checkbox\" \n                    className=\"sr-only peer\" \n                    checked={autoProgression}\n                    onChange={(e) => handleAutoProgressionChange(e.target.checked)}\n                  />\n                  <div className=\"w-11 h-6 bg-muted peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary\"></div>\n                </label>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notifications */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-text-primary mb-4\">Notifications</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-text-primary\">Workout Reminders</span>\n                  <p className=\"text-neutral text-sm\">Daily training notifications</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input \n                    type=\"checkbox\" \n                    className=\"sr-only peer\" \n                    checked={workoutReminders}\n                    onChange={(e) => handleWorkoutRemindersChange(e.target.checked)}\n                  />\n                  <div className=\"w-11 h-6 bg-muted peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary\"></div>\n                </label>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-text-primary\">Rest Day Alerts</span>\n                  <p className=\"text-neutral text-sm\">Recovery day reminders</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input \n                    type=\"checkbox\" \n                    className=\"sr-only peer\" \n                    checked={restDayAlerts}\n                    onChange={(e) => handleRestDayAlertsChange(e.target.checked)}\n                  />\n                  <div className=\"w-11 h-6 bg-muted peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary\"></div>\n                </label>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data & Privacy */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-text-primary mb-4\">Data & Privacy</h3>\n            <div className=\"space-y-3\">\n              <Button\n                variant=\"ghost\"\n                onClick={handleExportData}\n                className=\"w-full justify-between text-left p-3 h-auto\"\n              >\n                <span className=\"text-text-primary\">Export Workout Data</span>\n                <Download className=\"h-4 w-4 text-neutral\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={handleResetProgress}\n                className=\"w-full justify-between text-left p-3 h-auto text-destructive hover:text-destructive\"\n              >\n                <span>Reset All Progress</span>\n                <RotateCcw className=\"h-4 w-4 text-neutral\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* About */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-text-primary mb-4\">About</h3>\n            <div className=\"space-y-2 text-sm text-neutral\">\n              <p>FitFlow v2.1.0</p>\n              <p>Progressive training companion for structured workouts</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10284},"client/src/pages/setup.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Calendar, Dumbbell, RefreshCw } from \"lucide-react\";\n\nexport default function Setup() {\n  const [, setLocation] = useLocation();\n  const [startDate, setStartDate] = useState(new Date().toISOString().split('T')[0]);\n  const [currentWeek, setCurrentWeek] = useState(1);\n  const [autoProgression, setAutoProgression] = useState(true);\n\n  const handleCompleteSetup = () => {\n    // Save setup data to localStorage\n    const setupData = {\n      startDate,\n      currentWeek,\n      autoProgression,\n      completedAt: new Date().toISOString(),\n    };\n    \n    localStorage.setItem(\"fitflow-setup\", JSON.stringify(setupData));\n    localStorage.setItem(\"fitflow-setup-complete\", \"true\");\n    \n    setLocation(\"/overview\");\n  };\n\n  const incrementWeek = () => {\n    if (currentWeek < 12) setCurrentWeek(currentWeek + 1);\n  };\n\n  const decrementWeek = () => {\n    if (currentWeek > 1) setCurrentWeek(currentWeek - 1);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-app-background p-5 pt-12 pb-8\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-text-primary mb-2\">Welcome to FitFlow</h1>\n        <p className=\"text-neutral text-lg\">Your progressive training companion</p>\n      </div>\n\n      <div className=\"space-y-6 max-w-md mx-auto\">\n        {/* Step 1: Start Date */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center text-text-primary\">\n              <Calendar className=\"text-primary mr-3 h-5 w-5\" />\n              Training Start Date\n            </h3>\n            <input \n              type=\"date\" \n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n              className=\"input-field\"\n            />\n          </CardContent>\n        </Card>\n\n        {/* Step 2: Current Week */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center text-text-primary\">\n              <Dumbbell className=\"text-primary mr-3 h-5 w-5\" />\n              Current Training Week\n            </h3>\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={decrementWeek}\n                disabled={currentWeek <= 1}\n                className=\"w-12 h-12 rounded-xl\"\n              >\n                <span className=\"text-neutral\">−</span>\n              </Button>\n              <div className=\"text-center\">\n                <span className=\"text-2xl font-bold text-text-primary\">{currentWeek}</span>\n                <p className=\"text-sm text-neutral\">Week</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={incrementWeek}\n                disabled={currentWeek >= 12}\n                className=\"w-12 h-12 rounded-xl\"\n              >\n                <span className=\"text-neutral\">+</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Step 3: Auto Progression */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center text-text-primary\">\n              <RefreshCw className=\"text-primary mr-3 h-5 w-5\" />\n              Auto Week Progression\n            </h3>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-text-primary\">Automatically advance weeks</span>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input \n                  type=\"checkbox\" \n                  className=\"sr-only peer\" \n                  checked={autoProgression}\n                  onChange={(e) => setAutoProgression(e.target.checked)}\n                />\n                <div className=\"w-11 h-6 bg-muted peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary\"></div>\n              </label>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Button \n        onClick={handleCompleteSetup}\n        className=\"w-full mt-8 max-w-md mx-auto block btn-primary\"\n      >\n        Start Training Program\n      </Button>\n    </div>\n  );\n}\n","size_bytes":4673},"client/src/pages/workout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Pause, Play } from \"lucide-react\";\nimport { useWorkout } from \"@/hooks/use-workout\";\nimport { useTimer } from \"@/hooks/use-timer\";\nimport ExerciseCard from \"@/components/exercise-card\";\nimport SwipeableContainer from \"@/components/swipeable-container\";\n\nexport default function Workout() {\n  const [match, params] = useRoute(\"/workout/:dayType\");\n  const [, setLocation] = useLocation();\n  const { getWorkoutByDay, currentWeek } = useWorkout();\n  const { time, start, pause, reset } = useTimer();\n  \n  // Three-phase workout state\n  const [currentPhaseIndex, setCurrentPhaseIndex] = useState(0); // 0=warm-up, 1=main, 2=cool-down\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [workoutData, setWorkoutData] = useState<{\n    name: string;\n    type: string;\n    warmUp: Array<{\n      id: string;\n      name: string;\n      phase: string;\n      instructions: string[];\n      imageUrl: string;\n      weekFormulas: Record<string, string>;\n    }>;\n    mainTraining: Array<{\n      id: string;\n      name: string;\n      phase: string;\n      instructions: string[];\n      imageUrl: string;\n      weekFormulas: Record<string, string>;\n    }>;\n    coolDown: Array<{\n      id: string;\n      name: string;\n      phase: string;\n      instructions: string[];\n      imageUrl: string;\n      weekFormulas: Record<string, string>;\n    }>;\n  } | null>(null);\n  const [isPaused, setIsPaused] = useState(false);\n  const [workoutStarted, setWorkoutStarted] = useState(false);\n\n  // Workout phase configuration\n  const phases = ['warmUp', 'mainTraining', 'coolDown'] as const;\n  const phaseNames = ['Warm-up', 'Main Training', 'Cool-down'] as const;\n  \n  // Get current phase data\n  const currentPhaseName = phaseNames[currentPhaseIndex];\n  const currentPhaseKey = phases[currentPhaseIndex];\n  const currentPhaseExercises = workoutData?.[currentPhaseKey] || [];\n  const currentExercise = currentPhaseExercises[currentExerciseIndex];\n\n  // Calculate totals\n  const totalExercises = (workoutData?.warmUp?.length || 0) + \n                        (workoutData?.mainTraining?.length || 0) + \n                        (workoutData?.coolDown?.length || 0);\n  \n  // Calculate current overall exercise index for progress\n  const getOverallIndex = () => {\n    let index = 0;\n    for (let i = 0; i < currentPhaseIndex; i++) {\n      const phaseKey = phases[i];\n      index += workoutData?.[phaseKey]?.length || 0;\n    }\n    index += currentExerciseIndex;\n    return index;\n  };\n\n  useEffect(() => {\n    if (params?.dayType) {\n      const workout = getWorkoutByDay(params.dayType);\n      setWorkoutData(workout);\n    }\n  }, [params?.dayType]);\n\n  const handleStartWorkout = () => {\n    setWorkoutStarted(true);\n    start();\n  };\n\n  const handleBackToOverview = () => {\n    pause();\n    setLocation(\"/overview\");\n  };\n\n  const handlePauseWorkout = () => {\n    if (isPaused) {\n      start();\n    } else {\n      pause();\n    }\n    setIsPaused(!isPaused);\n  };\n\n  const handleNextExercise = () => {\n    if (currentExerciseIndex < currentPhaseExercises.length - 1) {\n      // Move to next exercise in current phase\n      setCurrentExerciseIndex(currentExerciseIndex + 1);\n    } else if (currentPhaseIndex < phases.length - 1) {\n      // Move to next phase\n      setCurrentPhaseIndex(currentPhaseIndex + 1);\n      setCurrentExerciseIndex(0);\n    } else {\n      // Complete workout\n      completeWorkout();\n    }\n  };\n\n  const handlePrevExercise = () => {\n    if (currentExerciseIndex > 0) {\n      // Move to previous exercise in current phase\n      setCurrentExerciseIndex(currentExerciseIndex - 1);\n    } else if (currentPhaseIndex > 0) {\n      // Move to previous phase\n      const prevPhaseIndex = currentPhaseIndex - 1;\n      const prevPhaseKey = phases[prevPhaseIndex];\n      const prevPhaseExercises = workoutData?.[prevPhaseKey] || [];\n      setCurrentPhaseIndex(prevPhaseIndex);\n      setCurrentExerciseIndex(prevPhaseExercises.length - 1);\n    }\n  };\n\n  const completeWorkout = () => {\n    pause();\n    \n    // Save workout completion\n    const completedWorkouts = JSON.parse(localStorage.getItem(\"fitflow-completed-workouts\") || \"[]\");\n    const workoutKey = `${currentWeek}-${params?.dayType}-${new Date().toDateString()}`;\n    completedWorkouts.push(workoutKey);\n    localStorage.setItem(\"fitflow-completed-workouts\", JSON.stringify(completedWorkouts));\n    \n    // Save workout stats\n    const workoutStats = {\n      duration: time,\n      exercisesCompleted: totalExercises,\n      totalExercises: totalExercises,\n      caloriesBurned: Math.floor((time / 60) * 8), // Rough estimate: 8 cal/min\n      dayType: params?.dayType,\n      week: currentWeek,\n      completedAt: new Date().toISOString(),\n    };\n    localStorage.setItem(\"fitflow-last-workout\", JSON.stringify(workoutStats));\n    \n    setLocation(\"/complete\");\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Navigation helpers\n  const canGoNext = currentPhaseIndex < phases.length - 1 || currentExerciseIndex < currentPhaseExercises.length - 1;\n  const canGoPrev = currentPhaseIndex > 0 || currentExerciseIndex > 0;\n  const isLast = currentPhaseIndex === phases.length - 1 && currentExerciseIndex === currentPhaseExercises.length - 1;\n\n  if (!workoutData) {\n    return (\n      <div className=\"min-h-screen bg-app-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mb-4\"></div>\n          <p className=\"text-neutral\">Loading workout...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentExercise) {\n    return (\n      <div className=\"min-h-screen bg-app-background flex items-center justify-center p-6\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-4\">No Exercise Data</h2>\n          <p className=\"text-muted-foreground mb-6\">Unable to load exercise for Day {params?.dayType}</p>\n          <Button onClick={() => setLocation('/overview')}>\n            Back to Overview\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const exerciseProgress = ((getOverallIndex() + 1) / totalExercises) * 100;\n\n  return (\n    <div className=\"min-h-screen bg-app-background\">\n      {/* Workout Header */}\n      <div className=\"bg-secondary text-white p-5 pt-12 sticky top-0 z-10\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={handleBackToOverview}\n            className=\"w-10 h-10 bg-blue-700 border-blue-700 text-white hover:bg-blue-600\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div className=\"text-center\">\n            <h1 className=\"font-bold\">{workoutData.name}</h1>\n            <p className=\"text-blue-200 text-sm\">Week {currentWeek} • {currentPhaseName}</p>\n          </div>\n          {workoutStarted ? (\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={handlePauseWorkout}\n              className=\"w-10 h-10 bg-blue-700 border-blue-700 text-white hover:bg-blue-600\"\n            >\n              {isPaused ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\n            </Button>\n          ) : (\n            <div className=\"w-10 h-10\"></div>\n          )}\n        </div>\n        \n        {/* Phase Progress Indicator */}\n        <div className=\"flex space-x-2 mb-4\">\n          {phases.map((phase, index) => (\n            <div key={phase} className=\"flex-1 relative\">\n              <div className={`h-1 rounded-full transition-colors ${\n                index < currentPhaseIndex ? 'bg-primary' :\n                index === currentPhaseIndex ? 'bg-primary/60' : 'bg-blue-700'\n              }`} />\n              <div className={`text-xs text-center mt-1 transition-colors ${\n                index === currentPhaseIndex ? 'text-primary font-semibold' : 'text-blue-200'\n              }`}>\n                {phaseNames[index]}\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        {/* Exercise Progress */}\n        <div className=\"flex items-center justify-between text-sm\">\n          <span>Exercise {getOverallIndex() + 1} of {totalExercises}</span>\n          <span>{formatTime(time)}</span>\n        </div>\n        <div className=\"bg-blue-700 rounded-full h-2 mt-2\">\n          <div \n            className=\"bg-primary rounded-full h-2 transition-all duration-300\" \n            style={{ width: `${exerciseProgress}%` }}\n          />\n        </div>\n      </div>\n\n      {/* Exercise Card Container */}\n      <div className=\"relative overflow-hidden\" style={{ height: \"calc(100vh - 200px)\" }}>\n        {!workoutStarted ? (\n          // Start Screen\n          <div className=\"flex items-center justify-center h-full p-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-2xl font-bold mb-4\">Ready to start your workout?</h2>\n              <p className=\"text-muted-foreground mb-8\">\n                Today's workout includes {currentPhaseName} with {currentPhaseExercises.length} exercises\n              </p>\n              <Button onClick={handleStartWorkout} className=\"btn-primary text-lg px-8 py-4\">\n                Start {currentPhaseName}\n              </Button>\n            </div>\n          </div>\n        ) : (\n          // Workout in Progress\n          <SwipeableContainer\n            onSwipeLeft={handleNextExercise}\n            onSwipeRight={handlePrevExercise}\n            currentIndex={getOverallIndex()}\n            totalItems={totalExercises}\n          >\n            <ExerciseCard\n              exercise={currentExercise}\n              week={currentWeek}\n              onComplete={handleNextExercise}\n              onSkip={handleNextExercise}\n              isActive={true}\n            />\n          </SwipeableContainer>\n        )}\n      </div>\n\n      {/* Bottom Controls */}\n      {workoutStarted && (\n        <div className=\"absolute bottom-0 left-0 right-0 z-20 bg-background/90 backdrop-blur-sm border-t p-4\">\n          <div className=\"flex space-x-3\">\n            <Button\n              onClick={handlePauseWorkout}\n              variant=\"outline\"\n              className=\"flex-1\"\n            >\n              {isPaused ? 'Resume' : 'Pause'}\n            </Button>\n            <Button\n              onClick={handleNextExercise}\n              className=\"flex-1 btn-primary\"\n              disabled={!canGoNext && !isLast}\n            >\n              {isLast ? 'Complete Workout' : 'Next Exercise'}\n            </Button>\n          </div>\n\n          {/* Exercise Progress Indicators */}\n          <div className=\"flex justify-center mt-4\">\n            <div className=\"flex space-x-1\">\n              {Array.from({ length: totalExercises }).map((_, index) => (\n                <div\n                  key={index}\n                  className={`w-2 h-2 rounded-full transition-colors ${\n                    index === getOverallIndex() ? 'bg-primary' : \n                    index < getOverallIndex() ? 'bg-primary/60' : 'bg-muted'\n                  }`}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":11492},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}